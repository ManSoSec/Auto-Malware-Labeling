using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using VTAPI;
using FileCryto;

namespace VTDemo
{
    public partial class VTInteractionForm : Form
    {
        public string vt_user = "";
        public string vt_pass = "";
        public string vt_apikey = "";

        string[] FilesPath;
        string[] FilesName;

        public int threashold = 0;
        public int WordThreshold = 0;
                
        public delegate void UpdateListViewCallback(ListView LV, ListViewItem LVI);
        public delegate void UpdateTSSLTextCallback(ToolStripStatusLabel TSSL, string text);
        public delegate void UpdateTimerCallback(Timer T, bool Enabled);

        bool RescanFlag = false;
        
        public VTInteractionForm()
        {
            InitializeComponent();

            GetConfiguration();
        }

        private void GetConfiguration()
        {
            Option Config= HandleIO.ReadOption();

            vt_apikey = Config.VirusTotalAPIKey;
            threashold = Config.Threashold;
            WordThreshold = Config.WordThreshold;
            chbReScan.Checked = Config.Rescan;
            txtFiles.Text = Config.DefaultFilesPath;
        }

        private void btnBrowse_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog bfd = new FolderBrowserDialog();

            if (bfd.ShowDialog() == DialogResult.OK)
            {
                txtFiles.Text = bfd.SelectedPath;
                                
            }
        }

        private void tsmiAbout_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Developed by : Mansour Ahmadi");
        }

        private void VTInteractionForm_Load(object sender, EventArgs e)
        {

        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            if (txtFiles.Text == "")
                return;

            if (btnStart.Tag.ToString() == "stop")
            {
                FilesPath = HandleIO.GetDirectoryFilesPath(txtFiles.Text);
                FilesName = HandleIO.GetDirectoryFilesName(txtFiles.Text);

                if (FilesPath.Length == 0)
                    return;                

                lstVFileNames.Items.Clear();
                lstVResults.Items.Clear();

                bwScanFile.RunWorkerAsync(lstVFileNames);

                btnStart.Tag = "start";
                btnStart.Image = Properties.Resources.stop_copy;
            }
            else
            {
                bwScanFile.CancelAsync();

                btnStart.Tag = "stop";
                btnStart.Image = Properties.Resources.start_copy;
            }

        }

        private void UpdateTSSLText(ToolStripStatusLabel TSSL, string text)
        {
            TSSL.Text = text;
        }

        private void UpdateListViewItems(ListView sender, ListViewItem LVI)
        {
            sender.Items.Add(LVI);
        }

        private void UpdateTimer(Timer T, bool Enabled)
        {
            timer1.Enabled = Enabled;
        }

        private void bwScanFile_DoWork(object sender, DoWorkEventArgs e)
        {

            for (int i = 0; i < FilesPath.Length; i++)
            {
                if (bwScanFile.CancellationPending == true)
                {
                    e.Cancel = true;
                    this.Invoke(new UpdateTSSLTextCallback(this.UpdateTSSLText), new object[] { tsslWaitedTime, "" });
                    this.Invoke(new UpdateTimerCallback(this.UpdateTimer), new object[] { timer1, false });
                    return;
                }

                if ((i % 4 == 0) && i != 0)
                {
                    this.Invoke(new UpdateTSSLTextCallback(this.UpdateTSSLText), new object[] { tsslWaitedTime, "60" });
                    this.Invoke(new UpdateTimerCallback(this.UpdateTimer), new object[] { timer1, true });

                    System.Threading.Thread.Sleep(60000);

                    this.Invoke(new UpdateTSSLTextCallback(this.UpdateTSSLText), new object[] { tsslWaitedTime, "" });
                    this.Invoke(new UpdateTimerCallback(this.UpdateTimer), new object[] { timer1, false });
                }

                ListViewItem itm = new ListViewItem();
                itm.Text = FilesName[i];
                itm.SubItems.Add("");
                itm.Tag = FilesPath[i];

                var fileStream = new FileStream(FilesPath[i], FileMode.OpenOrCreate, FileAccess.Read);
                string MD5 = Crypto.CalculateMD5Hash(fileStream);
                itm.SubItems[0].Tag = MD5;
                /////// GET SHA256
                //string sha256 = Crypto.GetChecksumBuffered(fileStream);
                //itm.SubItems[0].Tag = sha256;

                this.Invoke(new UpdateListViewCallback(this.UpdateListViewItems), new object[] { lstVFileNames, itm });
                                
                HandleFilesWithVT(itm);
                
            }

            
        }

        private void HandleFilesWithVT(ListViewItem LVI)
        {
            VirusTotal vt = new VirusTotal(this.vt_user, this.vt_pass, this.vt_apikey);
            string FilePath = (string)((ListViewItem)LVI).Tag;
            ((ListViewItem)LVI).Tag = null;
            vt.sendAndScanFile(FilePath, Convert.ToString(((ListViewItem)LVI).SubItems[0].Tag),false);

            if (vt.results == "No Internet")
            {
                bwScanFile.ReportProgress(0, vt.results);
                return;
            }

            string[] results = null;
            if (vt.results == "No Data")
            {
                results = null;
                bwScanFile.ReportProgress(0, vt.results);
                //return;
            }
            else
            {
                results = vt.results.Split('\n');
            }
            ((ListViewItem)LVI).Tag = results;

            //try
            //{
            bwScanFile.ReportProgress(100, "");
            //}
            //catch
            //{ }
        }

        private void bwScanFile_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            InternetStatus.ForeColor = Color.Black;

            if (e.UserState.ToString() == "No Internet")
            {
                InternetStatus.ForeColor = Color.Red;
                InternetStatus.Text = "There is no Internet";
                return;
            }
            else if (e.UserState.ToString() == "No Data")
            {
                InternetStatus.ForeColor = Color.Red;
                InternetStatus.Text = "There is no data";
                return;

            }
            else
            {
                InternetStatus.ForeColor = Color.Green;
                InternetStatus.Text = "Internet is connected";
                
                //lstVFileNames_SelectedIndexChanged(null, null);

                lstVFileNames.Focus();
                lstVFileNames.Items[lstVFileNames.Items.Count - 1].Selected = true;

                foreach (ListViewItem lvi in lstVFileNames.Items)
                {
                    if (lvi.Tag == null)
                        continue;

                    lvi.SubItems[1].Tag = FindStandardName(lvi.Tag);
                }


                CARONaming CaroObj = ((CARONaming)lstVFileNames.SelectedItems[0].SubItems[1].Tag);

                if (CaroObj != null)
                {
                    txtWords.Text = Convert.ToString(CaroObj.WordsAndValues);

                    txtType1.Text = CaroObj.StandardType1;
                    txtType2.Text = CaroObj.StandardType2;
                    txtPlatform.Text = CaroObj.StandardPlatform;
                    txtExtraInfo.Text = CaroObj.StandardExtraInfo;
                    txtFamilyName.Text = CaroObj.StandardFamilyName;
                    txtVariant.Text = CaroObj.StandardVariant;

                    /*
                    lstVFileNames.SelectedItems[0].SubItems[1].Text = string.Format("{0}-{1}:{2}/{3}.{4}!{5}", CaroObj.StandardType1 == "" ? "NoN" : CaroObj.StandardType1,
                        CaroObj.StandardType2 == "" ? "NoN" : CaroObj.StandardType2, CaroObj.StandardPlatform == "" ? "NoN" : CaroObj.StandardPlatform,
                        CaroObj.StandardFamilyName == "" ? "NoN" : CaroObj.StandardFamilyName, CaroObj.StandardVariant == "" ? "NoN" : CaroObj.StandardVariant,
                        CaroObj.StandardExtraInfo == "" ? "NoN" : CaroObj.StandardExtraInfo);
                     */

                    lstVFileNames.SelectedItems[0].SubItems[1].Text = string.Format("{0}:{2}/{3}.{4}", CaroObj.StandardType1 == "" ? "NoN" : CaroObj.StandardType1,
                        CaroObj.StandardType2 == "" ? "NoN" : CaroObj.StandardType2, CaroObj.StandardPlatform == "" ? "NoN" : CaroObj.StandardPlatform,
                        CaroObj.StandardFamilyName == "" ? "NoN" : CaroObj.StandardFamilyName, CaroObj.StandardVariant == "" ? "NoN" : CaroObj.StandardVariant,
                        CaroObj.StandardExtraInfo == "" ? "NoN" : CaroObj.StandardExtraInfo);
                }
                                
            }
            
        }

        private void bwScanFile_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            btnStart.Tag = "stop";
            btnStart.Image = Properties.Resources.start_copy;
                                    
        }

        private CARONaming FindStandardName(object Tag)
        {
            CARONaming Caro = new CARONaming() { WordThreshold = this.WordThreshold };
            Caro.SeperateWords((string[])Tag);

            Caro.GetStandardName();
            
            return Caro;
            
        }

        private void lstVFileNames_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lstVFileNames.SelectedIndices.Count == 0)
                return;

            lblsha256.Text = Convert.ToString(lstVFileNames.SelectedItems[0].SubItems[0].Tag);

            CARONaming CaroObj = ((CARONaming)lstVFileNames.SelectedItems[0].SubItems[1].Tag);

            if (CaroObj != null)
            {
                txtWords.Text = Convert.ToString(CaroObj.WordsAndValues);

                txtType1.Text = CaroObj.StandardType1;
                txtType2.Text = CaroObj.StandardType2;
                txtPlatform.Text = CaroObj.StandardPlatform;
                txtExtraInfo.Text = CaroObj.StandardExtraInfo;
                txtFamilyName.Text = CaroObj.StandardFamilyName;
                txtVariant.Text = CaroObj.StandardVariant;

            }

            status.ForeColor = Color.Black;

            lstVResults.Items.Clear();

            if (lstVFileNames.SelectedItems[0].Tag == null)
            {
                status.Text = "In progress ...";
                ClearDetail();
                return;
            }
            else
            {
                status.ForeColor = Color.Green;
                status.Text = "See the information";
            }

            string[] results = null;
            try
            {
                results = (string[])lstVFileNames.SelectedItems[0].Tag;
            }
            catch
            {
                
            }

            if (results == null)
            {
                status.ForeColor = Color.Red;
                status.Text = "No Data was fetched";
                return;
            }


            int counter = 0;

            foreach (string result in results)
            {
                try
                {
                    string[] line = { "", "" };
                    
                    line = result.Split('■');

                    ListViewItem itm = new ListViewItem();
                    itm.Text = line[0];
                    itm.SubItems.Add(line[1]);
                    lstVResults.Items.Add(itm);

                    if (line[1] != "")
                        counter++;
                }
                catch { }
            }

            lblMal.Text = counter.ToString();
            lblTotal.Text = (results.Length-1).ToString();

            if (counter >= threashold)
            {
                chbConfirm.Checked = true;
            }
            else
            {
                chbConfirm.Checked = false;
            }
            
        }

        private void ClearDetail()
        {
            txtExtraInfo.Text = txtFamilyName.Text = txtPlatform.Text = txtType1.Text = txtVariant.Text = txtWords.Text = "";
            lstVResults.Items.Clear();
            chbConfirm.Checked = false;
            lblsha256.Text = lblMal.Text = lblTotal.Text = "--";
        }
                
        private void chbConfirm_CheckedChanged(object sender, EventArgs e)
        {
            if(chbConfirm.Checked)
            {
                gbxSuggestedName.Enabled = true;
            }
            else
            {
                gbxSuggestedName.Enabled = false;
            }
        }
                
        private void timer1_Tick(object sender, EventArgs e)
        {
            tsslWaitedTime.Text = Convert.ToString(Convert.ToInt32( tsslWaitedTime.Text)-1);
        }

        private void SaveNames_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem itemRow in this.lstVFileNames.Items)
            {   
                string[] Items = itemRow.SubItems[1].Text.Split(':','/','.');
                string RowValue = string.Format("{0}:{1}", Convert.ToString(itemRow.SubItems[0].Tag), Items[2]+"."+Items[3] );
                HandleIO.SaveFamilyNames(txtFiles.Text+"\\FamilyNames.txt", RowValue);
            }

            MessageBox.Show("Data Saved!");
        }


        private void btnDel_Click(object sender, EventArgs e)
        {
            ListView.SelectedIndexCollection Col = lstVFileNames.SelectedIndices;
            lstVFileNames.Items.RemoveAt(Col[0]);
            lstVFileNames.Refresh();
        }

        private void txtType1_TextChanged(object sender, EventArgs e)
        {
            ListView.SelectedIndexCollection Col = lstVFileNames.SelectedIndices;
            CARONaming Selected = (CARONaming)lstVFileNames.Items[Col[0]].SubItems[1].Tag;



            switch (((TextBox)sender).Name)
            {
                case "txtExtraInfo":
                    Selected.StandardExtraInfo = ((TextBox)sender).Text;
                    break;
                case "txtFamilyName":
                    Selected.StandardFamilyName = ((TextBox)sender).Text;
                    break;
                case "txtType1":
                    Selected.StandardType1 = ((TextBox)sender).Text;
                    break;
                case "txtType2":
                    Selected.StandardType2 = ((TextBox)sender).Text;
                    break;
                case "txtVariant":
                    Selected.StandardVariant = ((TextBox)sender).Text;
                    break;
                case "txtPlatform":
                    Selected.StandardPlatform = ((TextBox)sender).Text;
                    break;
            }

            lstVFileNames.Refresh();


            lstVFileNames.SelectedItems[0].SubItems[1].Text = string.Format("{0}:{2}/{3}.{4}", Selected.StandardType1 == "" ? "NoN" : Selected.StandardType1,
                        Selected.StandardType2 == "" ? "NoN" : Selected.StandardType2, Selected.StandardPlatform == "" ? "NoN" : Selected.StandardPlatform,
                        Selected.StandardFamilyName == "" ? "NoN" : Selected.StandardFamilyName, Selected.StandardVariant == "" ? "NoN" : Selected.StandardVariant,
                        Selected.StandardExtraInfo == "" ? "NoN" : Selected.StandardExtraInfo);
        }

        
        
    }
}
