using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Windows.Forms;

namespace VTDemo
{
    class HandleIO
    {

        public static string[] GetDirectoryFilesPath(string DirectoryPath)
        {
            return Directory.GetFiles(DirectoryPath, "*.*", SearchOption.AllDirectories);
        }

        public static string[] GetDirectoryFilesName(string DirectoryPath)
        {
            string[] FilesPath = Directory.GetFiles(DirectoryPath, "*.*", SearchOption.AllDirectories);
            string[] FileNames= new string[FilesPath.Length];
            int counter = 0;

            foreach(string FilePath in FilesPath)
            {
                FileNames[counter++] = FilePath.Substring(FilePath.LastIndexOf('\\')+1);
            }

            return FileNames;
        }

        public static Option ReadOption()
        {
            string OptionFile = Application.StartupPath + "\\Config.ini";

            if (!File.Exists(OptionFile))
                return null;

            Option Config = new Option();

            string[] FileLines= File.ReadAllLines(OptionFile);

            foreach(string file in FileLines)
            {
                string[] Parameters = file.Split('=');
                try
                {
                    MakeOption(Parameters, Config);
                }
                catch { }
            }

            return Config;

        }

        private static void MakeOption(string[] Parameters, Option Config)
        {
            switch (Parameters[0].Trim())
            {
                case "VirusTotalAPIKey":
                    Config.VirusTotalAPIKey=Parameters[1].Trim();
                    break;
                case "DefaultFilesPath":
                    Config.DefaultFilesPath = Parameters[1].Trim();
                    break;
                case "Threashold":
                    Config.Threashold = Convert.ToInt32(Parameters[1].Trim());
                    break;
                case "WordThreshold":
                    Config.WordThreshold = Convert.ToInt32(Parameters[1].Trim());
                    break;
                case "Rescan":
                    Config.Rescan = Convert.ToBoolean(Parameters[1].Trim());
                    break;
            }
        }

        public static void SaveFamilyNames(string FilePath, string RowValue)
        {

            if (!File.Exists(FilePath))
            {
                // Create a file to write to. 
                using (StreamWriter sw = File.CreateText(FilePath))
                {
                    sw.WriteLine(RowValue);
                }
            }
            else
            {
                // The file exists
                using (StreamWriter sw = File.AppendText(FilePath))
                {
                    sw.WriteLine(RowValue);
                }
            }
        }

    }
}
