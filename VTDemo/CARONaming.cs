using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;

namespace VTDemo
{
    class CARONaming
    {
        public string StandardType1="";
        public string StandardType2 = "";
        public string StandardPlatform="";
        public string StandardFamilyName="";
        public string StandardVariant="";
        public string StandardExtraInfo="";

        public int WordThreshold = 0;

        public Hashtable SeperatedWords;
        public Hashtable NamingDatabse;
        public Dictionary<string,int> SortedWords;

        public string WordsAndValues;
        
        public CARONaming()
        {
            SeperatedWords = new Hashtable();
            WordsAndValues = "";
            SortedWords = new Dictionary<string, int>();
        }

        public void SeperateWords(string[] Results)
        {

            WordsAndValues = "";

            foreach (string result in Results)
            {

                if (result == "")
                    continue;

                string[] line = { "", "" };
                line = result.Split('■');

                char[] Sep = new char[] { ',', '_', '-', '.', '!', '@', '/', '\\' , ':', '(', ')', '[', ']' };

                if (line[1] == "")
                    continue;

                string[] Words = line[1].Split(Sep);

                foreach (string word in Words)
                {
                    string EditedWord = word.Trim().ToLower();

                    if (EditedWord == "" || EditedWord == "variant" || EditedWord == "malware" || EditedWord == "ws" || EditedWord == "reputation" || EditedWord == "mal"
                        || EditedWord == "1" || EditedWord == "unclassifiedmalware" || EditedWord=="mlwr")
                        continue;

                    string[] EditedWords = Standardize(EditedWord);

                    foreach (string StandardWord in EditedWords)
                    {
                        if (!SeperatedWords.Contains(StandardWord))
                        {
                            SeperatedWords.Add(StandardWord, 1);
                        }
                        else
                        {
                            SeperatedWords[StandardWord] = Convert.ToInt32(SeperatedWords[StandardWord]) + 1;
                        }
                    }
                }
            }

            var SortedSeperatedWords = SeperatedWords.Cast<DictionaryEntry>().OrderBy(entry => entry.Value).ToList();

            foreach (var pair in SortedSeperatedWords)
            {
                SortedWords.Add(Convert.ToString(pair.Key), Convert.ToInt32(pair.Value));
            }
            

            SortedSeperatedWords.Reverse();

            int flag=0;
            foreach (var pair in SortedSeperatedWords)
            {

                if ((Convert.ToInt32(pair.Value) < WordThreshold)&&flag==0)
                {
                    WordsAndValues += "=====================\r\n";
                    flag = 1;
                }

                WordsAndValues += string.Format("{0,-30}\t{1}\r\n", Convert.ToString(pair.Key), Convert.ToString(pair.Value));
                                
            }

            
        }

        private string[] Standardize(string EditedWord)
        {
            string Names="";
            int counter = 0;
            MalwareDatabase DB = new MalwareDatabase();

            NamingDatabse = new Hashtable();

            foreach (DictionaryEntry DE in DB.Records)
            {
                NamingDatabse.Add(DE.Key.ToString(),((MalwareDatabseRecord)DE.Value).NamePart.ToString());
            }

            foreach (DictionaryEntry DE in DB.Records)
            {

                var results = Array.FindAll(((MalwareDatabseRecord)DE.Value).SimilarNames, s => EditedWord.Equals(s));
                if (results.Length != 0)
                {
                    Names+= Convert.ToString( ((MalwareDatabseRecord)DE.Value).Name)+",";
                    counter++;
                }
            }

            if(Names!="")
                Names = Names.Substring(0,Names.Length-1);

            if (counter == 0)
                return new string[] { EditedWord };
            else
            {
                return Names.Split(',');
            }

            
        }

        public void GetStandardName()
        {

            foreach (var pair in SortedWords)
            {
                if (pair.Value < WordThreshold)
                    continue;

                if (NamingDatabse.Contains(pair.Key))
                {
                    switch (NamingDatabse[pair.Key].ToString())
                    {
                        case "type1":
                            StandardType1 = pair.Key;
                            break;
                        case "type2":
                            StandardType2 = pair.Key;
                            break;
                        case "platform":
                            StandardPlatform = pair.Key;
                            break;
                        case "familyname":
                            StandardFamilyName = pair.Key;
                            break;
                        case "extrainfo":
                            StandardExtraInfo = pair.Key;
                            break;

                    }
                }
                else
                {
                    if ((pair.Key.Length >= 1 && pair.Key.Length <= 2))
                    {
                        StandardVariant = pair.Key;
                    }
                    else
                    {
                        
                        char[] chars = pair.Key.ToCharArray();
                        int Flag = 0;
                        foreach (char c in chars)
                        {
                            if (char.IsDigit(c))
                            {
                                Flag = 1;
                                break;
                            }
                        }

                        if (Flag == 1)
                            StandardVariant = pair.Key;
                        else
                            StandardFamilyName = pair.Key;
                        
                    }
                }

            }
        }

    }
}
